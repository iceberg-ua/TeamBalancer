@page "/create-teams"
@using TeamBalancer.Core.Models
@using TeamBalancer.Core.Services.Interfaces
@using TeamBalancer.Core.Services.Balancing
@using TeamBalancer.Desktop.Components.Shared
@using TeamBalancer.Desktop.Services
@inject IPlayerRepository PlayerRepository
@inject TeamBalancingService TeamBalancingService
@inject TeamStateService TeamState
@inject NavigationManager Navigation

<div class="player-list-container">
    <div class="player-list-content">
        <h1>Select Players</h1>

        @if (_isLoading)
        {
            <div class="loading">Loading players...</div>
        }
        else if (!_players.Any())
        {
            <div class="no-players">
                <p>No players available. Please add players first.</p>
                <button class="btn btn-primary" @onclick="GoToAddPlayer">Add Player</button>
            </div>
        }
        else
        {
            <SelectablePlayerList Players="_players"
                                  SelectedPlayerIds="_selectedPlayerIds"
                                  OnPlayerSelectionChanged="HandlePlayerSelectionChanged"
                                  OnSelectAllPlayersChanged="HandleSelectAllChanged" />

            <div class="selection-info">
                <p>Selected: @_selectedPlayerIds.Count / @_players.Count players</p>
            </div>

            <div class="algorithm-selection">
                <label class="algorithm-label">Balancing Algorithm:</label>
                <div class="algorithm-options">
                    <label class="algorithm-option">
                        <input type="radio"
                               name="algorithm"
                               value="@BalancingAlgorithmType.SnakeDraft"
                               checked="@(_selectedAlgorithm == BalancingAlgorithmType.SnakeDraft)"
                               @onchange="@(() => _selectedAlgorithm = BalancingAlgorithmType.SnakeDraft)" />
                        <div class="algorithm-info">
                            <span class="algorithm-name">Snake Draft</span>
                            <span class="algorithm-description">Fast, alternating picks (recommended for speed)</span>
                        </div>
                    </label>
                    <label class="algorithm-option">
                        <input type="radio"
                               name="algorithm"
                               value="@BalancingAlgorithmType.IterativeSwap"
                               checked="@(_selectedAlgorithm == BalancingAlgorithmType.IterativeSwap)"
                               @onchange="@(() => _selectedAlgorithm = BalancingAlgorithmType.IterativeSwap)" />
                        <div class="algorithm-info">
                            <span class="algorithm-name">Iterative Swap</span>
                            <span class="algorithm-description">Better balance, optimizes by swapping players</span>
                        </div>
                    </label>
                </div>
            </div>

            <div class="button-group">
                <button class="btn btn-success"
                        @onclick="CreateTeams"
                        disabled="@(_selectedPlayerIds.Count < 2)">
                    Create Teams
                </button>
                <button class="btn btn-secondary" @onclick="Cancel">
                    Cancel
                </button>
            </div>
        }
    </div>
</div>

@code {
    private List<Player> _players = new();
    private HashSet<Guid> _selectedPlayerIds = new();
    private bool _isLoading = true;
    private BalancingAlgorithmType _selectedAlgorithm = BalancingAlgorithmType.SnakeDraft;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayers();
    }

    private async Task LoadPlayers()
    {
        _isLoading = true;
        var players = await PlayerRepository.GetAllAsync();
        _players = players.ToList();

        // Pre-select all players
        _selectedPlayerIds = _players.Select(p => p.Id).ToHashSet();

        _isLoading = false;
        StateHasChanged();
    }

    private void HandlePlayerSelectionChanged((Guid PlayerId, bool IsSelected) selection)
    {
        if (selection.IsSelected)
        {
            _selectedPlayerIds.Add(selection.PlayerId);
        }
        else
        {
            _selectedPlayerIds.Remove(selection.PlayerId);
        }
    }

    private void HandleSelectAllChanged(bool selectAll)
    {
        if (selectAll)
        {
            _selectedPlayerIds = _players.Select(p => p.Id).ToHashSet();
        }
        else
        {
            _selectedPlayerIds.Clear();
        }
    }

    private void CreateTeams()
    {
        // Get selected players
        var selectedPlayers = _players
            .Where(p => _selectedPlayerIds.Contains(p.Id))
            .ToList();

        if (selectedPlayers.Count < 2)
        {
            return;
        }

        // Balance teams using selected algorithm with shuffle enabled for variety
        // Shuffle ensures each generation creates different teams while maintaining balance
        var teams = TeamBalancingService.BalanceTeams(
            selectedPlayers,
            numberOfTeams: 2,
            algorithmType: _selectedAlgorithm,
            shuffle: true);

        // Store teams in state service
        TeamState.SetTeams(teams);

        // Navigate to teams page
        Navigation.NavigateTo("/teams");
    }

    private void GoToAddPlayer()
    {
        Navigation.NavigateTo("/add-player");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }
}
