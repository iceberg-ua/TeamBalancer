@page "/create-teams"
@using TeamBalancer.Core.Models
@using TeamBalancer.Core.Services.Interfaces
@using TeamBalancer.Desktop.Components.Shared
@inject IPlayerRepository PlayerRepository
@inject NavigationManager Navigation

<div class="player-list-container">
    <div class="player-list-content">
        <h1>Select Players</h1>

        @if (_isLoading)
        {
            <div class="loading">Loading players...</div>
        }
        else if (!_players.Any())
        {
            <div class="no-players">
                <p>No players available. Please add players first.</p>
                <button class="btn btn-primary" @onclick="GoToAddPlayer">Add Player</button>
            </div>
        }
        else
        {
            <SelectablePlayerList Players="_players"
                                  SelectedPlayerIds="_selectedPlayerIds"
                                  OnPlayerSelectionChanged="HandlePlayerSelectionChanged"
                                  OnSelectAllPlayersChanged="HandleSelectAllChanged" />

            <div class="selection-info">
                <p>Selected: @_selectedPlayerIds.Count / @_players.Count players</p>
            </div>

            <div class="button-group">
                <button class="btn btn-success"
                        @onclick="CreateTeams"
                        disabled="@(_selectedPlayerIds.Count < 2)">
                    Create Teams
                </button>
                <button class="btn btn-secondary" @onclick="Cancel">
                    Cancel
                </button>
            </div>
        }
    </div>
</div>

@code {
    private List<Player> _players = new();
    private HashSet<Guid> _selectedPlayerIds = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayers();
    }

    private async Task LoadPlayers()
    {
        _isLoading = true;
        var players = await PlayerRepository.GetAllAsync();
        _players = players.ToList();

        // Pre-select all players
        _selectedPlayerIds = _players.Select(p => p.Id).ToHashSet();

        _isLoading = false;
        StateHasChanged();
    }

    private void HandlePlayerSelectionChanged((Guid PlayerId, bool IsSelected) selection)
    {
        if (selection.IsSelected)
        {
            _selectedPlayerIds.Add(selection.PlayerId);
        }
        else
        {
            _selectedPlayerIds.Remove(selection.PlayerId);
        }
    }

    private void HandleSelectAllChanged(bool selectAll)
    {
        if (selectAll)
        {
            _selectedPlayerIds = _players.Select(p => p.Id).ToHashSet();
        }
        else
        {
            _selectedPlayerIds.Clear();
        }
    }

    private void CreateTeams()
    {
        // TODO: Implement team creation logic
        // For now, just show a message or navigate to results page
    }

    private void GoToAddPlayer()
    {
        Navigation.NavigateTo("/add-player");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }
}
