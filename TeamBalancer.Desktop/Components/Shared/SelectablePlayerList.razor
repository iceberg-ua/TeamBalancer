@using TeamBalancer.Core.Models

<div class="player-list-header">
    <div class="header-checkbox"></div>
    <div class="header-name">Player</div>
    <div class="header-skills">
        <span>Speed</span>
        <span>Tech</span>
        <span>Stamina</span>
    </div>
</div>

<div class="player-list">
    @foreach (var player in Players)
    {
        <div class="player-item">
            <label class="player-checkbox">
                <input type="checkbox"
                       checked="@SelectedPlayerIds.Contains(player.Id)"
                       @onchange="@((e) => OnSelectionChanged(player.Id, (bool)e.Value!))" />
                <div class="player-info">
                    <div class="player-name">@player.Name</div>
                    <div class="player-skills">
                        <div class="skill-item">
                            <span class="skill-stars">
                                @for (int i = 1; i <= 3; i++)
                                {
                                    <i class="@(i <= player.Speed ? "fa-solid" : "fa-regular") fa-star star-small"></i>
                                }
                            </span>
                        </div>
                        <div class="skill-item">
                            <span class="skill-stars">
                                @for (int i = 1; i <= 3; i++)
                                {
                                    <i class="@(i <= player.TechnicalSkills ? "fa-solid" : "fa-regular") fa-star star-small"></i>
                                }
                            </span>
                        </div>
                        <div class="skill-item">
                            <span class="skill-stars">
                                @for (int i = 1; i <= 3; i++)
                                {
                                    <i class="@(i <= player.Stamina ? "fa-solid" : "fa-regular") fa-star star-small"></i>
                                }
                            </span>
                        </div>
                    </div>
                </div>
            </label>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public List<Player> Players { get; set; } = new();

    [Parameter, EditorRequired]
    public HashSet<Guid> SelectedPlayerIds { get; set; } = new();

    [Parameter]
    public EventCallback<(Guid PlayerId, bool IsSelected)> OnPlayerSelectionChanged { get; set; }

    private async Task OnSelectionChanged(Guid playerId, bool isSelected)
    {
        await OnPlayerSelectionChanged.InvokeAsync((playerId, isSelected));
    }
}
