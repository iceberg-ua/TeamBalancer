@using TeamBalancer.Core.Models

<div class="player-list-container">
    <div class="player-list-header">
        <div class="header-checkbox">
            <input type="checkbox"
                   checked="@IsAllSelected"
                   @onchange="OnSelectAllChanged" />
        </div>
        <div class="header-name">Player</div>
        <div class="header-skills">
            <span>Speed</span>
            <span>Tech</span>
            <span>Stamina</span>
        </div>
    </div>

    <div class="player-list-scrollable">
        <div class="player-list">
            @foreach (var player in Players)
            {
                <PlayerItem Player="@player"
                           IsSelected="@SelectedPlayerIds.Contains(player.Id)"
                           OnSelectionChanged="@((isSelected) => OnSelectionChanged(player.Id, isSelected))" />
            }
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public List<Player> Players { get; set; } = [];

    [Parameter, EditorRequired]
    public HashSet<Guid> SelectedPlayerIds { get; set; } = [];

    [Parameter]
    public EventCallback<(Guid PlayerId, bool IsSelected)> OnPlayerSelectionChanged { get; set; }

    [Parameter]
    public EventCallback<bool> OnSelectAllPlayersChanged { get; set; }

    private bool IsAllSelected => Players.Any() && Players.All(p => SelectedPlayerIds.Contains(p.Id));

    private async Task OnSelectionChanged(Guid playerId, bool isSelected)
    {
        await OnPlayerSelectionChanged.InvokeAsync((playerId, isSelected));
    }

    private async Task OnSelectAllChanged(ChangeEventArgs e)
    {
        bool selectAll = (bool)e.Value!;
        await OnSelectAllPlayersChanged.InvokeAsync(selectAll);
    }

    public void SelectAll()
    {
        foreach (var player in Players)
        {
            SelectedPlayerIds.Add(player.Id);
        }
    }

    public void DeselectAll()
    {
        SelectedPlayerIds.Clear();
    }
}
