<div class="skill-rating">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="skill-rating-label">@Label</label>
    }
    <div class="rating-icons">
        @for (int i = 1; i <= MaxRating; i++)
        {
            var index = i;
            <i class="@(index <= _mouseOverIndex ? "fa-solid" : "fa-regular") fa-star rating-icon"
               @onclick="() => OnIconClick(index)"
               @onmouseenter="() => _mouseOverIndex = index"
               @onmouseleave="() => _mouseOverIndex = Value">
            </i>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Value { get; set; } = 1;

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public int MaxRating { get; set; } = 3;

    private int _mouseOverIndex = 1;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        _mouseOverIndex = Value;

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnIconClick(int rating)
    {
        Value = rating;
        await ValueChanged.InvokeAsync(Value);
    }
}
